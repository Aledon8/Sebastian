from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command

# üîë –¢–æ–∫–µ–Ω—ã
API_TOKEN = API_TELEGRAM_BOT
ERRORS_GROUP_ID = GROUP_ID  # –ì—Ä—É–ø–ø–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

# üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = OPENAI_API_KEY

# üé≠ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ OpenAI
def get_poetic_response(user_request: str):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a poetic butler named Sebastian in a Telegram group."},
                {"role": "user", "content": user_request}
            ],
            max_tokens=100
        )
        return response['choices'][0]['message']['content']
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"

# üè∑ –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tagall (–æ—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("tagall"))
async def tag_all_members(message: types.Message):
    try:
        members = await bot.get_chat_administrators(message.chat.id)
        text = "üì¢ –û—Ç–º–µ—á–∞—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"

        for member in members:
            user = member.user
            if not user.is_bot:
                text += f"{user.mention_html()}\n"

        await message.reply(text, parse_mode=ParseMode.HTML)

    except Exception as e:
        await bot.send_message(ERRORS_GROUP_ID, f"–û—à–∏–±–∫–∞: {e}")

# ü§ñ –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ "–°–µ–±–∞—Å—Ç—å—è–Ω"
@router.message(F.text.lower().contains("c–µ–±–∞—Å—Ç—å—è–Ω"))
async def respond_to_sebastian(message: types.Message):
    user_text = message.text.split("–°–µ–±–∞—Å—Ç—å—è–Ω", 1)[-1].strip()

    if user_text:
        poetic_response = get_poetic_response(user_text)
        await message.reply(f"üìú {poetic_response}")
    else:
        await message.reply("üßê –Ø –≤–∞—Å —Å–ª—É—à–∞—é, –Ω–æ –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å–∞. –ö–∞–∫ –º–Ω–µ –ø–æ–º–æ—á—å?")

# üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º router –∫ Dispatcher
dp.include_router(router)

# üöÄ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

# üî• –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())


